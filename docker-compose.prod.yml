# Docker Compose for AI Study Circle - Production Environment
version: '3.8'

services:
  # MongoDB Database with Authentication
  mongodb:
    image: mongo:7.0-jammy
    container_name: ai-study-circle-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ai-study-circle
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - ai-study-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for Session Storage with Persistence
  redis:
    image: redis:7.2-alpine
    container_name: ai-study-circle-redis-prod
    restart: always
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ai-study-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API Service
  backend:
    build:
      context: ./backend
      target: production
      dockerfile: Dockerfile
    container_name: ai-study-circle-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/ai-study-circle?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_TRANSLATE_API_KEY=${GOOGLE_TRANSLATE_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-https://yourdomain.com}
      - BACKEND_URL=${BACKEND_URL:-https://api.yourdomain.com}
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-study-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Frontend React Service
  frontend:
    build:
      context: ./frontend
      target: production
      dockerfile: Dockerfile
    container_name: ai-study-circle-frontend-prod
    restart: always
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    depends_on:
      - backend
    networks:
      - ai-study-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: ai-study-circle-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - ai-study-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Log Management (Optional)
  logrotate:
    image: blacklabelops/logrotate
    container_name: ai-study-circle-logrotate
    restart: unless-stopped
    volumes:
      - backend_logs:/logs/backend
      - nginx_logs:/logs/nginx
    environment:
      - LOGS_DIRECTORIES=/logs/backend /logs/nginx
      - LOGROTATE_SIZE=100M
      - LOGROTATE_COPIES=5
    networks:
      - ai-study-network
    profiles:
      - logging

volumes:
  mongodb_data:
    name: ai-study-circle-mongodb-data-prod
  mongodb_config:
    name: ai-study-circle-mongodb-config-prod
  redis_data:
    name: ai-study-circle-redis-data-prod
  backend_logs:
    name: ai-study-circle-backend-logs-prod
  backend_uploads:
    name: ai-study-circle-backend-uploads-prod
  nginx_logs:
    name: ai-study-circle-nginx-logs-prod

networks:
  ai-study-network:
    name: ai-study-circle-network-prod
    driver: bridge